class Solution {
  vector<bool> vis;
  bool dfs(int current, int parent, vector<vector<int>>& adj) {
      vis[current] = true;
      for(auto x : adj[current]) {
          if(!vis[x]) {
              if(dfs(x, current, adj)) {
                  return true;
              }
          }
          else if(x != parent) return true;
      }
      return false;
  }
public:
  bool isCycle(int V, vector<vector<int>>& edges) {
      vector<vector<int>> adj(V);
      vis.assign(V, false);
      for(auto e : edges){
          adj[e[0]].push_back(e[1]);
          adj[e[1]].push_back(e[0]);
      }
      for(int i = 0; i < V; i++) {
          if(!vis[i]) {
              if(dfs(i, -1, adj)) {
                  return true;
              }
          }
      }
      return false;
  }
};
